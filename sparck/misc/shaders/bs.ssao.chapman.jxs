<jittershader name="cartopol">
	<description>
	/*******************************************************************************
	* SSAO
	*
	* Adapted for Jitter by maybites (http://maybites.ch)
	*
	* from http://john-chapman-graphics.blogspot.ch/2013/01/ssao-tutorial.html
	*
	*******************************************************************************/
	</description>
	<param name="vi_matrix" type="mat4"/>

	<param name="uKernelOffsets" type="vec3" />
	<param name="uKernelSize" type="int" default="16" />
	<param name="uRadius" type="float" default="1.5" />
	<param name="uPower" type="float" default="2.0" />

	<param name="uProjectionMatrix" type="mat4"/>

	<param name="uFrustumLeft" type="float" default="-0.1" />
	<param name="uFrustumRight" type="float" default="0.1" />
	<param name="uFrustumTop" type="float" default="0.1" />
	<param name="uFrustumBottom" type="float" default="-0.1" />
	<param name="uFrustumNear" type="float" default="0.05" />
	<param name="uFrustumFar" type="float" default="100.0" />

	<param name="colorTexture" type="int" default="0" />
	<param name="comboTexture" type="int" default="1" />
	<param name="noiseTexture" type="int" default="2" />

	<language name="glsl" version="1.0">
		<bind param="vi_matrix" program="fp" />

		<bind param="uKernelOffsets" program="fp" />
		<bind param="uKernelSize" program="fp" />
		<bind param="uRadius" program="fp" />
		<bind param="uPower" program="fp" />

		<bind param="uProjectionMatrix" program="fp" />

		<bind param="uFrustumLeft" program="vp" />
		<bind param="uFrustumRight" program="vp" />
		<bind param="uFrustumTop" program="vp" />
		<bind param="uFrustumBottom" program="vp" />
		<bind param="uFrustumNear" program="vp" />
		<bind param="uFrustumFar" program="vp" />

		<bind param="colorTexture" program="fp" />
		<bind param="comboTexture" program="fp" />
		<bind param="noiseTexture" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com
#version 120
	
uniform float uFrustumLeft;
uniform float uFrustumRight;
uniform float uFrustumTop;
uniform float uFrustumBottom;
uniform float uFrustumNear;
uniform float uFrustumFar;

varying vec2 vDepthCoord;
varying vec2 vNormalCoord;
varying vec2 vNoiseCoord;
varying vec2 vDepthDim;
varying vec2 vNormalDim;
varying vec2 vNoiseDim;

varying vec3 viewRay;

void main()
{
    // perform standard transform on vertex
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

    // transform texcoords from unit to pixel coordinates
    vDepthCoord = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord0);
    vNormalCoord = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    vNoiseCoord = vec2(gl_TextureMatrix[2] * gl_MultiTexCoord2);
    // extract the x and y scalars from the texture matrix to determine dimensions
    vDepthDim = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
    vNormalDim = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
    vNoiseDim = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));

    viewRay = vec3(
    	mix(uFrustumLeft, uFrustumRight, gl_MultiTexCoord0.x),
		mix(uFrustumBottom, uFrustumTop, gl_MultiTexCoord0.y),
		uFrustumNear);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect colorTexture;
uniform sampler2DRect comboTexture;
uniform sampler2DRect noiseTexture;

const int MAX_KERNEL_SIZE = 128;
uniform int uKernelSize;
uniform vec3 uKernelOffsets[MAX_KERNEL_SIZE];
uniform float uRadius;
uniform float uPower;

uniform mat4 uProjectionMatrix;

uniform float uFrustumLeft;
uniform float uFrustumRight;
uniform float uFrustumTop;
uniform float uFrustumBottom;
uniform float uFrustumNear;
uniform float uFrustumFar;

uniform mat4 vi_matrix;
#define PI    3.14159265

varying vec2 vDepthCoord;
varying vec2 vNormalCoord;
varying vec2 vNoiseCoord;
varying vec2 vDepthDim;
varying vec2 vNormalDim;
varying vec2 vNoiseDim;

varying vec3 viewRay;

//------------------------------------------
//general stuff

vec3 decodeNormal(vec3 normal) {
	vec3 result = normal.rgb * 2.0 - 1.0;
//	result.z = (result.x * result.x + result.y * result.y) * 2.0 - 1.0;
//	result.xy = normalize(result.xy) * sqrt(1.0 - result.z * result.z);
	return result.xyz;
}

vec3 encodeNormal(vec3 enc) {
	vec3 result = enc;
//	result.xy = normalize(enc.xy) * sqrt(enc.z * 0.5 + 0.5);
//	result.z = 0.0;
	result = result * 0.5 + 0.5;
	return result;
}


/*----------------------------------------------------------------------------*/
float ssao(mat3 kernelBasis, vec3 originPos, float radius) {
	float occlusion = 0.0;
	for (int i = 0; i < uKernelSize; ++i) {
	//	get sample position:
		vec3 samplePos = kernelBasis * uKernelOffsets[i];
		samplePos = samplePos * radius + originPos;

	//	project sample position:
		vec4 offset =  uProjectionMatrix * vec4(samplePos, 1.0);
		offset.xy /= offset.w; // only need xy
		offset.xy = offset.xy * 0.5 + 0.5; // scale/bias to texcoords

	//	get sample depth:
		float sampleDepth = texture2DRect(comboTexture, vDepthDim * offset.xy).a * uFrustumFar;
		//sampleDepth = linearizeDepth(sampleDepth, uProjectionMatrix);

		float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));
		occlusion += rangeCheck * step(sampleDepth, samplePos.z);
	}

	occlusion = 1.0 - (occlusion / float(uKernelSize));
	return pow(occlusion, uPower);
}

/*----------------------------------------------------------------------------*/
void main() {
//	get noise texture coords:
	vec2 noiseTexCoords = vDepthDim / vNoiseDim;
	noiseTexCoords *= vDepthCoord;

//	get view space origin:
	float originDepth = texture2DRect(comboTexture, vDepthCoord).a * uFrustumFar;
	vec3 normalViewRay = normalize(viewRay);
	vec3 originPos = normalViewRay * originDepth;

//	get view space normal:
	vec3 normal = decodeNormal(texture2DRect(comboTexture, vNormalCoord).rgb);

//	construct kernel basis matrix:
	vec3 rvec = texture2DRect(noiseTexture, vNoiseCoord).rgb * 2.0 - 1.0;
	vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
	vec3 bitangent = cross(tangent, normal);
	mat3 kernelBasis = mat3(tangent, bitangent, normal);

	vec3 worldPos = vec3(vec4(originPos, 1.0) * vi_matrix);

//	if(worldPos.z > 0.0)
		gl_FragColor = vec4(ssao(kernelBasis, originPos, uRadius));
		gl_FragColor = vec4(texture2DRect(comboTexture, vDepthCoord).y, 0., 0., 1.);
		//gl_FragColor = vec4(texture2DRect(comboTexture, vDepthCoord).rgb, 1.);
		//gl_FragColor = texture2DRect(colorTexture, vDepthCoord) * vec4(ssao(kernelBasis, originPos, uRadius));
//	else
//		gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
//		gl_FragColor = vec4(worldPos.z, worldPos.z, worldPos.z, 1.0);
//		gl_FragColor = vec4(viewRay.x / (uFrustumRight - uFrustumLeft) * 0.25 * 0.5 + 0.5, viewRay.y / (uFrustumTop - uFrustumBottom) * 0.25 * 0.5 + 0.5, 0.0, 1.0);
}
]]>
		</program>
	</language>
</jittershader>
