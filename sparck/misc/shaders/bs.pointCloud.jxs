<jittershader name="pointCloud">
	<description>Renders a mesh into a point cloud</description>
	<param name="encodeMode" type="int" default="0"/>
	<param name="bitDepthMode" type="int" default="0"/>

	<param name="cullNear" type="float" default="0."/>
	<param name="cullFar" type="float" default="10."/>

	<param name="distanceMin" type="float" default="0."/>
	<param name="distanceMax" type="float" default="4."/>

	<param name="pOff" type="vec2" default="319.909, 240.728"/>
	<param name="focal" type="vec2" default="386.323, 386.323"/>
	<param name="dim" type="vec2" default="640, 480"/>

  <param name="texdim" type="vec2" state="TEXDIM0" />
	<param name="image" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="encodeMode" program="vp" />
		<bind param="bitDepthMode" program="vp" />

	  <bind param="cullNear" program="vp" />
		<bind param="cullFar" program="vp" />

	  <bind param="distanceMin" program="vp" />
		<bind param="distanceMax" program="vp" />

	  <bind param="pOff" program="vp" />
	  <bind param="focal" program="vp" />
	  <bind param="dim" program="vp" />

	  <bind param="texdim" program="fp" />
		<bind param="image" program="vp" />
		<program name="vp" type="vertex">
<![CDATA[

uniform sampler2DRect image;

uniform int encodeMode;
uniform int bitDepthMode;

uniform float cullNear;
uniform float cullFar;

uniform float distanceMin;
uniform float distanceMax;

uniform vec2 pOff;
uniform vec2 focal;
uniform vec2 dim;

varying vec4 tc;
varying float distance;

float decodedDepth;
float upperDepth;
float lowerDepth;

void main (void)
{
    tc = gl_MultiTexCoord0;

		vec4 encodedDepth = texture2DRect(image, vec2(gl_TextureMatrix[0] * vec4(tc.x * 0.5, tc.y, tc.z, 1.)));

		decodedDepth = (encodeMode == 1)?sqrt(encodedDepth.r):encodedDepth.r; // square or linear
		if (bitDepthMode == 1){
			// decode 16bit depth from green and blue channel
			upperDepth = (encodeMode == 1)?sqrt(encodedDepth.g):encodedDepth.g;
			lowerDepth = (encodeMode == 1)?sqrt(encodedDepth.b):encodedDepth.b;
			//decodedDepth = float((int(upperDepth * 256) << 8) | int(lowerDepth * 256)) / pow(2, 16);
			decodedDepth = upperDepth;
		}

		// calculate distance in [m]
		distance = mix(distanceMax, distanceMin, decodedDepth);

    vec4 pt = vec4(((tc.xy * dim) - pOff) / focal * distance, - distance, 1.);

    vec4 mvPosition = gl_ModelViewMatrix * pt;

    //gl_PointSize = pixelSize * ( 300.0 / -mvPosition.z );

    gl_Position = gl_ProjectionMatrix * mvPosition;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

//sinewave spatial distortion shader
uniform sampler2DRect image;

uniform float cullFar;

varying vec4 tc;
varying float distance;

void main (void)
{
	// read color from color map
	vec4 color = vec4(0., 0., 0., 0.);

	if (distance < cullFar){
		// read color from color map
		color = texture2DRect(image, vec2(gl_TextureMatrix[0] * vec4(tc.x * 0.5 + 0.5, tc.y, tc.z, 1.)));
	} else {
		discard;
	}

	//add to the input texture position
	gl_FragColor = color;
}
]]>
		</program>
	</language>
</jittershader>
