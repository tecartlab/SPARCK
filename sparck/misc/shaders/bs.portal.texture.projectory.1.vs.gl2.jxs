// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

#version 120

uniform mat4 viewport_matrix;
uniform mat4 world_matrix;
uniform mat4 collada_factor;

uniform mat4 beamer_v_matrix[6];
uniform mat4 beamer_p_matrix[6];

varying vec4 beamer_uv[1];		// beamer uv position
varying vec2 beamer_texcoord[1];// beamer texcoord

varying vec3 normal;	// surface normal
varying vec3 worldPos;	// vertex world position

mat4 screen_m_matrix = world_matrix * collada_factor;

mat4 mvp0_matrix = beamer_p_matrix[0] * beamer_v_matrix[0] * screen_m_matrix;

void main(void)
{

	// perform standard transform on vertex (general approach)
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

	normal = normalize(mat3(screen_m_matrix) * gl_Normal);
	worldPos = (screen_m_matrix * gl_Vertex).xyz;

	vec4 clip, device, screen;

	// calculate the UV-coordinate for beamer 0
	clip = vec4(mvp0_matrix * gl_Vertex);
	device = vec4(clip.x / clip.w, clip.y / clip.w, clip.z / clip.w, 1.);
	screen = viewport_matrix * device;
	beamer_uv[0] = vec4(screen.x, screen.y, 0., 1.);
	beamer_texcoord[0] = vec2(gl_TextureMatrix[0] * beamer_uv[0]);
}
